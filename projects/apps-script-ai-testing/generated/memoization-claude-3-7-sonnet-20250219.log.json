{
  "object": {
    "code": "/**\n * Creates a memoized version of a function.\n * The memoized function caches results for previously used arguments.\n * \n * @param {Function} fn - The function to memoize\n * @return {Function} A memoized version of the function\n */\nfunction memoize(fn) {\n  // Create a cache to store results\n  const cache = {};\n  \n  // Return the memoized function\n  return function(...args) {\n    // Create a key from the arguments\n    const key = JSON.stringify(args);\n    \n    // If we have a cached result for these arguments, return it\n    if (cache.hasOwnProperty(key)) {\n      console.log('Returning cached result for:', args);\n      return cache[key];\n    }\n    \n    // Otherwise, call the original function and cache the result\n    const result = fn.apply(this, args);\n    cache[key] = result;\n    console.log('Caching new result for:', args);\n    return result;\n  };\n}\n\n/**\n * Example usage with an expensive function\n */\nfunction expensiveCalculation(n) {\n  console.log('Performing expensive calculation for:', n);\n  \n  // Simulate an expensive operation\n  Utilities.sleep(1000);\n  \n  return n * n;\n}\n\n/**\n * Test the memoization\n */\nfunction testMemoization() {\n  // Create a memoized version of the expensive function\n  const memoizedCalculation = memoize(expensiveCalculation);\n  \n  console.log('First call with 5:');\n  console.log(memoizedCalculation(5)); // Will perform the calculation\n  \n  console.log('Second call with 5:');\n  console.log(memoizedCalculation(5)); // Will use cached result\n  \n  console.log('Call with 10:');\n  console.log(memoizedCalculation(10)); // Will perform the calculation\n  \n  console.log('Another call with 5:');\n  console.log(memoizedCalculation(5)); // Will use cached result\n}\n\n/**\n * Example with a more complex function that fetches data\n */\nfunction fetchDataFromApi(id) {\n  console.log('Fetching data for ID:', id);\n  \n  // Simulate API call\n  Utilities.sleep(2000);\n  \n  return {\n    id: id,\n    name: 'Item ' + id,\n    timestamp: new Date().toISOString()\n  };\n}\n\n/**\n * Test memoization with API calls\n */\nfunction testApiMemoization() {\n  const memoizedFetch = memoize(fetchDataFromApi);\n  \n  console.log('First fetch for ID 123:');\n  console.log(memoizedFetch(123));\n  \n  console.log('Second fetch for ID 123 (should be cached):');\n  console.log(memoizedFetch(123));\n  \n  console.log('Fetch for ID 456:');\n  console.log(memoizedFetch(456));\n}"
  },
  "finishReason": "tool-calls",
  "usage": {
    "promptTokens": 472,
    "completionTokens": 783,
    "totalTokens": 1255
  },
  "warnings": [],
  "providerMetadata": {
    "anthropic": {
      "cacheCreationInputTokens": 0,
      "cacheReadInputTokens": 0
    }
  },
  "experimental_providerMetadata": {
    "anthropic": {
      "cacheCreationInputTokens": 0,
      "cacheReadInputTokens": 0
    }
  },
  "response": {
    "id": "msg_01NoMdpRKZpMDTX4rgFBtwsa",
    "timestamp": "2025-03-11T23:50:33.957Z",
    "modelId": "claude-3-7-sonnet-20250219",
    "headers": {
      "anthropic-organization-id": "215d381a-c388-42c7-8115-840170a6d5c4",
      "anthropic-ratelimit-input-tokens-limit": "20000",
      "anthropic-ratelimit-input-tokens-remaining": "20000",
      "anthropic-ratelimit-input-tokens-reset": "2025-03-11T23:48:19Z",
      "anthropic-ratelimit-output-tokens-limit": "8000",
      "anthropic-ratelimit-output-tokens-remaining": "8000",
      "anthropic-ratelimit-output-tokens-reset": "2025-03-11T23:48:27Z",
      "anthropic-ratelimit-requests-limit": "50",
      "anthropic-ratelimit-requests-remaining": "49",
      "anthropic-ratelimit-requests-reset": "2025-03-11T23:48:18Z",
      "anthropic-ratelimit-tokens-limit": "28000",
      "anthropic-ratelimit-tokens-remaining": "28000",
      "anthropic-ratelimit-tokens-reset": "2025-03-11T23:48:19Z",
      "cf-cache-status": "DYNAMIC",
      "cf-ray": "91eef11a79e62b86-LAX",
      "connection": "keep-alive",
      "content-encoding": "gzip",
      "content-type": "application/json",
      "date": "Tue, 11 Mar 2025 23:48:27 GMT",
      "request-id": "req_01Qh1Ys6JCW2GdaSSLxgSWyd",
      "server": "cloudflare",
      "transfer-encoding": "chunked",
      "via": "1.1 google",
      "x-robots-tag": "none"
    },
    "body": {
      "id": "msg_01NoMdpRKZpMDTX4rgFBtwsa",
      "type": "message",
      "role": "assistant",
      "model": "claude-3-7-sonnet-20250219",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01A8u2gX7HeX7eYq99u1VMmu",
          "name": "json",
          "input": {
            "code": "/**\n * Creates a memoized version of a function.\n * The memoized function caches results for previously used arguments.\n * \n * @param {Function} fn - The function to memoize\n * @return {Function} A memoized version of the function\n */\nfunction memoize(fn) {\n  // Create a cache to store results\n  const cache = {};\n  \n  // Return the memoized function\n  return function(...args) {\n    // Create a key from the arguments\n    const key = JSON.stringify(args);\n    \n    // If we have a cached result for these arguments, return it\n    if (cache.hasOwnProperty(key)) {\n      console.log('Returning cached result for:', args);\n      return cache[key];\n    }\n    \n    // Otherwise, call the original function and cache the result\n    const result = fn.apply(this, args);\n    cache[key] = result;\n    console.log('Caching new result for:', args);\n    return result;\n  };\n}\n\n/**\n * Example usage with an expensive function\n */\nfunction expensiveCalculation(n) {\n  console.log('Performing expensive calculation for:', n);\n  \n  // Simulate an expensive operation\n  Utilities.sleep(1000);\n  \n  return n * n;\n}\n\n/**\n * Test the memoization\n */\nfunction testMemoization() {\n  // Create a memoized version of the expensive function\n  const memoizedCalculation = memoize(expensiveCalculation);\n  \n  console.log('First call with 5:');\n  console.log(memoizedCalculation(5)); // Will perform the calculation\n  \n  console.log('Second call with 5:');\n  console.log(memoizedCalculation(5)); // Will use cached result\n  \n  console.log('Call with 10:');\n  console.log(memoizedCalculation(10)); // Will perform the calculation\n  \n  console.log('Another call with 5:');\n  console.log(memoizedCalculation(5)); // Will use cached result\n}\n\n/**\n * Example with a more complex function that fetches data\n */\nfunction fetchDataFromApi(id) {\n  console.log('Fetching data for ID:', id);\n  \n  // Simulate API call\n  Utilities.sleep(2000);\n  \n  return {\n    id: id,\n    name: 'Item ' + id,\n    timestamp: new Date().toISOString()\n  };\n}\n\n/**\n * Test memoization with API calls\n */\nfunction testApiMemoization() {\n  const memoizedFetch = memoize(fetchDataFromApi);\n  \n  console.log('First fetch for ID 123:');\n  console.log(memoizedFetch(123));\n  \n  console.log('Second fetch for ID 123 (should be cached):');\n  console.log(memoizedFetch(123));\n  \n  console.log('Fetch for ID 456:');\n  console.log(memoizedFetch(456));\n}"
          }
        }
      ],
      "stop_reason": "tool_use",
      "stop_sequence": null,
      "usage": {
        "input_tokens": 472,
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 0,
        "output_tokens": 783
      }
    }
  },
  "request": {
    "body": "{\"model\":\"claude-3-7-sonnet-20250219\",\"max_tokens\":5000,\"temperature\":0,\"system\":[{\"type\":\"text\",\"text\":\"You are an expert in Google Apps Script writing code. Your output should only be valid code that can be run in Google Apps Script. DO NOT WRITE MARKOWN. RETURN VALID APPS SCRIPT CODE ONLY.\"}],\"messages\":[{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":\"Write Apps Script code that memoizes an expensive function call\"}]}],\"tools\":[{\"name\":\"json\",\"description\":\"Respond with a JSON object.\",\"input_schema\":{\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"string\",\"description\":\"Valid Apps Script code\"}},\"required\":[\"code\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}}],\"tool_choice\":{\"type\":\"tool\",\"name\":\"json\"}}"
  },
  "duration": 136590
}