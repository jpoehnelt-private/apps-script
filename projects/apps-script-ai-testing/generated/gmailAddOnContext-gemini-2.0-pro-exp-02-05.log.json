{
  "object": {
    "code": "/**\n * @OnlyCurrentDoc\n */\n\n/**\n * Callback function that returns the card for the add-on's homepage.\n * @param {Object} e The event object.\n * @return {CardService.Card} The card to show on the add-on's homepage.\n */\nfunction buildAddOn(e) {\n  // Activate temporary Gmail add-on scopes.\n  var accessToken = e.gmail.accessToken;\n  GmailApp.setCurrentMessageAccessToken(accessToken);\n\n  var messageId = e.gmail.messageId;\n  var message = GmailApp.getMessageById(messageId);\n  var sender = message.getFrom();\n  var subject = message.getSubject();\n\n  // Create a section with the sender information.\n  var senderSection = CardService.newCardSection()\n    .setHeader(\"Sender Information\")\n    .addWidget(CardService.newTextParagraph().setText(\"<b>From:</b> \" + sender));\n\n  // Create a section with the subject information.\n  var subjectSection = CardService.newCardSection()\n    .setHeader(\"Subject\")\n    .addWidget(CardService.newTextParagraph().setText(\"<b>Subject:</b> \" + subject));\n\n  // Create a section for additional information (example: find sender's domain).\n  var additionalInfoSection = CardService.newCardSection()\n    .setHeader(\"Additional Information\")\n    .addWidget(CardService.newTextParagraph().setText(\"<b>Sender Domain:</b> \" + extractDomain(sender)));\n\n  // Build the main card.\n  var card = CardService.newCardBuilder()\n    .setHeader(CardService.newCardHeader().setTitle(\"Email Details\"))\n    .addSection(senderSection)\n    .addSection(subjectSection)\n    .addSection(additionalInfoSection);\n\n  return card.build();\n}\n\n/**\n * Extracts the domain from an email address.\n * @param {string} email The email address.\n * @return {string} The domain part of the email address, or the original email if parsing fails.\n */\nfunction extractDomain(email) {\n  try {\n    var parts = email.split('@');\n    if (parts.length === 2) {\n      return parts[1];\n    }\n    return email; // Return original if not in expected format\n  } catch (e) {\n    return email; // Return original in case of error\n  }\n}\n\n\n/**\n *  Required for Gmail add-ons.  \n */\nfunction onGmailCompose(e) {\n    return CardService.newCardBuilder().setHeader(\n      CardService.newCardHeader().setTitle(\"Compose Action\")\n    ).build();\n}\n\n\n/**\n * Required for contextual add-ons.\n */\nfunction onOpen(e) {\n  return buildAddOn(e);\n}\n\n/**\n * Required for authorization.\n */\nfunction getAuthorizationUrl(e) {\n  return '';\n}\n"
  },
  "finishReason": "stop",
  "usage": {
    "promptTokens": 66,
    "completionTokens": 716,
    "totalTokens": 782
  },
  "warnings": [],
  "providerMetadata": {
    "google": {
      "groundingMetadata": null,
      "safetyRatings": null
    }
  },
  "experimental_providerMetadata": {
    "google": {
      "groundingMetadata": null,
      "safetyRatings": null
    }
  },
  "response": {
    "id": "aiobj-74wDKIXdsbx5W6Tmj5ulpvGy",
    "timestamp": "2025-03-12T00:11:37.523Z",
    "modelId": "gemini-2.0-pro-exp-02-05",
    "headers": {
      "alt-svc": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000",
      "content-encoding": "gzip",
      "content-type": "application/json; charset=UTF-8",
      "date": "Wed, 12 Mar 2025 00:10:39 GMT",
      "server": "scaffolding on HTTPServer2",
      "server-timing": "gfet4t7; dur=7666",
      "transfer-encoding": "chunked",
      "vary": "Origin, X-Origin, Referer",
      "x-content-type-options": "nosniff",
      "x-frame-options": "SAMEORIGIN",
      "x-xss-protection": "0"
    },
    "body": {
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": " {\"code\":\"/**\\n * @OnlyCurrentDoc\\n */\\n\\n/**\\n * Callback function that returns the card for the add-on's homepage.\\n * @param {Object} e The event object.\\n * @return {CardService.Card} The card to show on the add-on's homepage.\\n */\\nfunction buildAddOn(e) {\\n  // Activate temporary Gmail add-on scopes.\\n  var accessToken = e.gmail.accessToken;\\n  GmailApp.setCurrentMessageAccessToken(accessToken);\\n\\n  var messageId = e.gmail.messageId;\\n  var message = GmailApp.getMessageById(messageId);\\n  var sender = message.getFrom();\\n  var subject = message.getSubject();\\n\\n  // Create a section with the sender information.\\n  var senderSection = CardService.newCardSection()\\n    .setHeader(\\\"Sender Information\\\")\\n    .addWidget(CardService.newTextParagraph().setText(\\\"<b>From:</b> \\\" + sender));\\n\\n  // Create a section with the subject information.\\n  var subjectSection = CardService.newCardSection()\\n    .setHeader(\\\"Subject\\\")\\n    .addWidget(CardService.newTextParagraph().setText(\\\"<b>Subject:</b> \\\" + subject));\\n\\n  // Create a section for additional information (example: find sender's domain).\\n  var additionalInfoSection = CardService.newCardSection()\\n    .setHeader(\\\"Additional Information\\\")\\n    .addWidget(CardService.newTextParagraph().setText(\\\"<b>Sender Domain:</b> \\\" + extractDomain(sender)));\\n\\n  // Build the main card.\\n  var card = CardService.newCardBuilder()\\n    .setHeader(CardService.newCardHeader().setTitle(\\\"Email Details\\\"))\\n    .addSection(senderSection)\\n    .addSection(subjectSection)\\n    .addSection(additionalInfoSection);\\n\\n  return card.build();\\n}\\n\\n/**\\n * Extracts the domain from an email address.\\n * @param {string} email The email address.\\n * @return {string} The domain part of the email address, or the original email if parsing fails.\\n */\\nfunction extractDomain(email) {\\n  try {\\n    var parts = email.split('@');\\n    if (parts.length === 2) {\\n      return parts[1];\\n    }\\n    return email; // Return original if not in expected format\\n  } catch (e) {\\n    return email; // Return original in case of error\\n  }\\n}\\n\\n\\n/**\\n *  Required for Gmail add-ons.  \\n */\\nfunction onGmailCompose(e) {\\n    return CardService.newCardBuilder().setHeader(\\n      CardService.newCardHeader().setTitle(\\\"Compose Action\\\")\\n    ).build();\\n}\\n\\n\\n/**\\n * Required for contextual add-ons.\\n */\\nfunction onOpen(e) {\\n  return buildAddOn(e);\\n}\\n\\n/**\\n * Required for authorization.\\n */\\nfunction getAuthorizationUrl(e) {\\n  return '';\\n}\\n\"}"
              }
            ],
            "role": "model"
          },
          "finishReason": "STOP",
          "index": 0
        }
      ],
      "usageMetadata": {
        "promptTokenCount": 66,
        "candidatesTokenCount": 716,
        "totalTokenCount": 782,
        "promptTokensDetails": [
          {
            "modality": "TEXT",
            "tokenCount": 66
          }
        ]
      },
      "modelVersion": "gemini-2.0-pro-exp-02-05"
    }
  },
  "request": {
    "body": "{\"generationConfig\":{\"maxOutputTokens\":5000,\"temperature\":0,\"responseMimeType\":\"application/json\",\"responseSchema\":{\"required\":[\"code\"],\"type\":\"object\",\"properties\":{\"code\":{\"description\":\"Valid Apps Script code\",\"type\":\"string\"}}}},\"contents\":[{\"role\":\"user\",\"parts\":[{\"text\":\"Write Apps Script code to create a Gmail add-on that allows users to view additional information about the email they are reading\"}]}],\"systemInstruction\":{\"parts\":[{\"text\":\"You are an expert in Google Apps Script writing code. Your output should only be valid code that can be run in Google Apps Script. DO NOT WRITE MARKOWN. RETURN VALID APPS SCRIPT CODE ONLY.\"}]}}"
  },
  "duration": 66145
}