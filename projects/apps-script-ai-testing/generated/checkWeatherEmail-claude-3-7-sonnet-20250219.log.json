{
  "object": {
    "code": "/**\n * Checks the weather forecast and sends an email if rain is predicted.\n * Uses OpenWeatherMap API to get weather data.\n */\nfunction checkWeatherAndNotify() {\n  // Configuration\n  const OPENWEATHERMAP_API_KEY = 'YOUR_API_KEY'; // Replace with your OpenWeatherMap API key\n  const CITY = 'London'; // Replace with your city\n  const RECIPIENT_EMAIL = 'your.email@example.com'; // Replace with your email\n  \n  try {\n    // Get weather data from OpenWeatherMap API\n    const weatherData = getWeatherForecast(CITY, OPENWEATHERMAP_API_KEY);\n    \n    // Check if rain is in the forecast\n    if (isRainInForecast(weatherData)) {\n      sendRainAlert(RECIPIENT_EMAIL, CITY, weatherData);\n      Logger.log('Rain alert email sent successfully.');\n    } else {\n      Logger.log('No rain in the forecast. No email sent.');\n    }\n  } catch (error) {\n    Logger.log('Error: ' + error.message);\n  }\n}\n\n/**\n * Gets weather forecast data from OpenWeatherMap API.\n * \n * @param {string} city - The city to get weather for\n * @param {string} apiKey - OpenWeatherMap API key\n * @return {object} Weather data\n */\nfunction getWeatherForecast(city, apiKey) {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`;\n  const response = UrlFetchApp.fetch(url);\n  return JSON.parse(response.getContentText());\n}\n\n/**\n * Checks if rain is predicted in the forecast data.\n * \n * @param {object} weatherData - Weather forecast data\n * @return {boolean} True if rain is in the forecast\n */\nfunction isRainInForecast(weatherData) {\n  // Check the next 24 hours (8 forecast points, as they're typically 3 hours apart)\n  const forecastPoints = Math.min(8, weatherData.list.length);\n  \n  for (let i = 0; i < forecastPoints; i++) {\n    const forecast = weatherData.list[i];\n    // Check if any weather condition contains rain\n    for (let j = 0; j < forecast.weather.length; j++) {\n      const condition = forecast.weather[j].main.toLowerCase();\n      if (condition.includes('rain') || condition === 'drizzle' || condition === 'thunderstorm') {\n        return true;\n      }\n    }\n  }\n  \n  return false;\n}\n\n/**\n * Sends an email alert about rain in the forecast.\n * \n * @param {string} recipient - Email address to send to\n * @param {string} city - City name\n * @param {object} weatherData - Weather forecast data\n */\nfunction sendRainAlert(recipient, city, weatherData) {\n  const cityName = weatherData.city.name;\n  const country = weatherData.city.country;\n  \n  // Get the first rain forecast details\n  let rainForecast = null;\n  for (let i = 0; i < weatherData.list.length; i++) {\n    const forecast = weatherData.list[i];\n    for (let j = 0; j < forecast.weather.length; j++) {\n      const condition = forecast.weather[j].main.toLowerCase();\n      if (condition.includes('rain') || condition === 'drizzle' || condition === 'thunderstorm') {\n        rainForecast = forecast;\n        break;\n      }\n    }\n    if (rainForecast) break;\n  }\n  \n  // Format date and time\n  const forecastDate = new Date(rainForecast.dt * 1000);\n  const formattedDate = Utilities.formatDate(forecastDate, Session.getScriptTimeZone(), \"EEEE, MMMM d, yyyy 'at' h:mm a\");\n  \n  // Create email content\n  const subject = `⚠️ Rain Alert for ${cityName}, ${country}`;\n  \n  let body = `Hello,\\n\\n`;\n  body += `Rain is expected in ${cityName}, ${country} on ${formattedDate}.\\n\\n`;\n  body += `Weather details:\\n`;\n  body += `- Temperature: ${rainForecast.main.temp}°C\\n`;\n  body += `- Condition: ${rainForecast.weather[0].description}\\n`;\n  body += `- Humidity: ${rainForecast.main.humidity}%\\n`;\n  body += `- Wind: ${rainForecast.wind.speed} m/s\\n\\n`;\n  body += `Don't forget your umbrella! ☔\\n\\n`;\n  body += `This is an automated message from your Weather Alert System.`;\n  \n  // Send the email\n  GmailApp.sendEmail(recipient, subject, body);\n}\n\n/**\n * Creates a trigger to run the weather check daily.\n * Run this function once to set up the daily trigger.\n */\nfunction createDailyTrigger() {\n  // Delete any existing triggers\n  const triggers = ScriptApp.getProjectTriggers();\n  for (let i = 0; i < triggers.length; i++) {\n    if (triggers[i].getHandlerFunction() === 'checkWeatherAndNotify') {\n      ScriptApp.deleteTrigger(triggers[i]);\n    }\n  }\n  \n  // Create a new trigger to run daily at 7:00 AM\n  ScriptApp.newTrigger('checkWeatherAndNotify')\n    .timeBased()\n    .atHour(7)\n    .everyDays(1)\n    .create();\n    \n  Logger.log('Daily weather check trigger created successfully.');\n}"
  },
  "finishReason": "tool-calls",
  "usage": {
    "promptTokens": 478,
    "completionTokens": 1486,
    "totalTokens": 1964
  },
  "warnings": [],
  "providerMetadata": {
    "anthropic": {
      "cacheCreationInputTokens": 0,
      "cacheReadInputTokens": 0
    }
  },
  "experimental_providerMetadata": {
    "anthropic": {
      "cacheCreationInputTokens": 0,
      "cacheReadInputTokens": 0
    }
  },
  "response": {
    "id": "msg_01Bde3YTUyAmKdyLqvo1un5L",
    "timestamp": "2025-03-11T21:57:54.468Z",
    "modelId": "claude-3-7-sonnet-20250219",
    "headers": {
      "anthropic-organization-id": "215d381a-c388-42c7-8115-840170a6d5c4",
      "anthropic-ratelimit-input-tokens-limit": "20000",
      "anthropic-ratelimit-input-tokens-remaining": "20000",
      "anthropic-ratelimit-input-tokens-reset": "2025-03-11T21:56:31Z",
      "anthropic-ratelimit-output-tokens-limit": "8000",
      "anthropic-ratelimit-output-tokens-remaining": "8000",
      "anthropic-ratelimit-output-tokens-reset": "2025-03-11T21:56:49Z",
      "anthropic-ratelimit-requests-limit": "50",
      "anthropic-ratelimit-requests-remaining": "49",
      "anthropic-ratelimit-requests-reset": "2025-03-11T21:56:30Z",
      "anthropic-ratelimit-tokens-limit": "28000",
      "anthropic-ratelimit-tokens-remaining": "28000",
      "anthropic-ratelimit-tokens-reset": "2025-03-11T21:56:31Z",
      "cf-cache-status": "DYNAMIC",
      "cf-ray": "91ee4d54184be65f-DEN",
      "connection": "keep-alive",
      "content-encoding": "gzip",
      "content-type": "application/json",
      "date": "Tue, 11 Mar 2025 21:56:49 GMT",
      "request-id": "req_017updWj2ViwrYXftrHfrbUd",
      "server": "cloudflare",
      "transfer-encoding": "chunked",
      "via": "1.1 google",
      "x-robots-tag": "none"
    },
    "body": {
      "id": "msg_01Bde3YTUyAmKdyLqvo1un5L",
      "type": "message",
      "role": "assistant",
      "model": "claude-3-7-sonnet-20250219",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_019HthukpioaryLz5syUfHKG",
          "name": "json",
          "input": {
            "code": "/**\n * Checks the weather forecast and sends an email if rain is predicted.\n * Uses OpenWeatherMap API to get weather data.\n */\nfunction checkWeatherAndNotify() {\n  // Configuration\n  const OPENWEATHERMAP_API_KEY = 'YOUR_API_KEY'; // Replace with your OpenWeatherMap API key\n  const CITY = 'London'; // Replace with your city\n  const RECIPIENT_EMAIL = 'your.email@example.com'; // Replace with your email\n  \n  try {\n    // Get weather data from OpenWeatherMap API\n    const weatherData = getWeatherForecast(CITY, OPENWEATHERMAP_API_KEY);\n    \n    // Check if rain is in the forecast\n    if (isRainInForecast(weatherData)) {\n      sendRainAlert(RECIPIENT_EMAIL, CITY, weatherData);\n      Logger.log('Rain alert email sent successfully.');\n    } else {\n      Logger.log('No rain in the forecast. No email sent.');\n    }\n  } catch (error) {\n    Logger.log('Error: ' + error.message);\n  }\n}\n\n/**\n * Gets weather forecast data from OpenWeatherMap API.\n * \n * @param {string} city - The city to get weather for\n * @param {string} apiKey - OpenWeatherMap API key\n * @return {object} Weather data\n */\nfunction getWeatherForecast(city, apiKey) {\n  const url = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`;\n  const response = UrlFetchApp.fetch(url);\n  return JSON.parse(response.getContentText());\n}\n\n/**\n * Checks if rain is predicted in the forecast data.\n * \n * @param {object} weatherData - Weather forecast data\n * @return {boolean} True if rain is in the forecast\n */\nfunction isRainInForecast(weatherData) {\n  // Check the next 24 hours (8 forecast points, as they're typically 3 hours apart)\n  const forecastPoints = Math.min(8, weatherData.list.length);\n  \n  for (let i = 0; i < forecastPoints; i++) {\n    const forecast = weatherData.list[i];\n    // Check if any weather condition contains rain\n    for (let j = 0; j < forecast.weather.length; j++) {\n      const condition = forecast.weather[j].main.toLowerCase();\n      if (condition.includes('rain') || condition === 'drizzle' || condition === 'thunderstorm') {\n        return true;\n      }\n    }\n  }\n  \n  return false;\n}\n\n/**\n * Sends an email alert about rain in the forecast.\n * \n * @param {string} recipient - Email address to send to\n * @param {string} city - City name\n * @param {object} weatherData - Weather forecast data\n */\nfunction sendRainAlert(recipient, city, weatherData) {\n  const cityName = weatherData.city.name;\n  const country = weatherData.city.country;\n  \n  // Get the first rain forecast details\n  let rainForecast = null;\n  for (let i = 0; i < weatherData.list.length; i++) {\n    const forecast = weatherData.list[i];\n    for (let j = 0; j < forecast.weather.length; j++) {\n      const condition = forecast.weather[j].main.toLowerCase();\n      if (condition.includes('rain') || condition === 'drizzle' || condition === 'thunderstorm') {\n        rainForecast = forecast;\n        break;\n      }\n    }\n    if (rainForecast) break;\n  }\n  \n  // Format date and time\n  const forecastDate = new Date(rainForecast.dt * 1000);\n  const formattedDate = Utilities.formatDate(forecastDate, Session.getScriptTimeZone(), \"EEEE, MMMM d, yyyy 'at' h:mm a\");\n  \n  // Create email content\n  const subject = `⚠️ Rain Alert for ${cityName}, ${country}`;\n  \n  let body = `Hello,\\n\\n`;\n  body += `Rain is expected in ${cityName}, ${country} on ${formattedDate}.\\n\\n`;\n  body += `Weather details:\\n`;\n  body += `- Temperature: ${rainForecast.main.temp}°C\\n`;\n  body += `- Condition: ${rainForecast.weather[0].description}\\n`;\n  body += `- Humidity: ${rainForecast.main.humidity}%\\n`;\n  body += `- Wind: ${rainForecast.wind.speed} m/s\\n\\n`;\n  body += `Don't forget your umbrella! ☔\\n\\n`;\n  body += `This is an automated message from your Weather Alert System.`;\n  \n  // Send the email\n  GmailApp.sendEmail(recipient, subject, body);\n}\n\n/**\n * Creates a trigger to run the weather check daily.\n * Run this function once to set up the daily trigger.\n */\nfunction createDailyTrigger() {\n  // Delete any existing triggers\n  const triggers = ScriptApp.getProjectTriggers();\n  for (let i = 0; i < triggers.length; i++) {\n    if (triggers[i].getHandlerFunction() === 'checkWeatherAndNotify') {\n      ScriptApp.deleteTrigger(triggers[i]);\n    }\n  }\n  \n  // Create a new trigger to run daily at 7:00 AM\n  ScriptApp.newTrigger('checkWeatherAndNotify')\n    .timeBased()\n    .atHour(7)\n    .everyDays(1)\n    .create();\n    \n  Logger.log('Daily weather check trigger created successfully.');\n}"
          }
        }
      ],
      "stop_reason": "tool_use",
      "stop_sequence": null,
      "usage": {
        "input_tokens": 478,
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 0,
        "output_tokens": 1486
      }
    }
  },
  "request": {
    "body": "{\"model\":\"claude-3-7-sonnet-20250219\",\"max_tokens\":5000,\"temperature\":0,\"system\":[{\"type\":\"text\",\"text\":\"You are an expert in Google Apps Script writing code. Your output should only be valid code that can be run in Google Apps Script. DO NOT WRITE MARKOWN. RETURN VALID APPS SCRIPT CODE ONLY.\"}],\"messages\":[{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":\"Write Apps Script code to check the weather and send an email if it is going to rain\"}]}],\"tools\":[{\"name\":\"json\",\"description\":\"Respond with a JSON object.\",\"input_schema\":{\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"string\",\"description\":\"Valid Apps Script code\"}},\"required\":[\"code\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}}],\"tool_choice\":{\"type\":\"tool\",\"name\":\"json\"}}"
  },
  "duration": 85101
}