{
  "object": {
    "code": "/**\n * Creates a memoized version of a function that caches its results\n * @param {Function} fn - The function to memoize\n * @return {Function} - The memoized function\n */\nfunction memoize(fn) {\n  const cache = new Map();\n  \n  return function(...args) {\n    // Create a cache key by stringifying the arguments\n    const key = JSON.stringify(args);\n    \n    // Check if result exists in cache\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    \n    // Calculate result and store in cache\n    const result = fn.apply(this, args);\n    cache.set(key, result);\n    return result;\n  };\n}\n\n// Example usage:\nfunction expensiveCalculation(n) {\n  // Simulate expensive computation\n  Utilities.sleep(1000);\n  return n * n;\n}\n\n// Create memoized version\nconst memoizedCalc = memoize(expensiveCalculation);\n\nfunction testMemoization() {\n  console.time('First call');\n  console.log(memoizedCalc(5)); // Takes ~1 second\n  console.timeEnd('First call');\n  \n  console.time('Second call');\n  console.log(memoizedCalc(5)); // Instant (cached)\n  console.timeEnd('Second call');\n  \n  console.time('New input');\n  console.log(memoizedCalc(10)); // Takes ~1 second (new calculation)\n  console.timeEnd('New input');\n}"
  },
  "finishReason": "tool-calls",
  "usage": {
    "promptTokens": 472,
    "completionTokens": 414,
    "totalTokens": 886
  },
  "warnings": [],
  "providerMetadata": {
    "anthropic": {
      "cacheCreationInputTokens": 0,
      "cacheReadInputTokens": 0
    }
  },
  "experimental_providerMetadata": {
    "anthropic": {
      "cacheCreationInputTokens": 0,
      "cacheReadInputTokens": 0
    }
  },
  "response": {
    "id": "msg_01J9WPaahax6ei8cJ6N1wBrg",
    "timestamp": "2025-03-12T00:04:18.798Z",
    "modelId": "claude-3-5-sonnet-20241022",
    "headers": {
      "anthropic-organization-id": "215d381a-c388-42c7-8115-840170a6d5c4",
      "anthropic-ratelimit-input-tokens-limit": "40000",
      "anthropic-ratelimit-input-tokens-remaining": "40000",
      "anthropic-ratelimit-input-tokens-reset": "2025-03-12T00:03:10Z",
      "anthropic-ratelimit-output-tokens-limit": "8000",
      "anthropic-ratelimit-output-tokens-remaining": "8000",
      "anthropic-ratelimit-output-tokens-reset": "2025-03-12T00:03:15Z",
      "anthropic-ratelimit-requests-limit": "50",
      "anthropic-ratelimit-requests-remaining": "49",
      "anthropic-ratelimit-requests-reset": "2025-03-12T00:03:09Z",
      "anthropic-ratelimit-tokens-limit": "48000",
      "anthropic-ratelimit-tokens-remaining": "48000",
      "anthropic-ratelimit-tokens-reset": "2025-03-12T00:03:10Z",
      "cf-cache-status": "DYNAMIC",
      "cf-ray": "91ef06d97b1d2f75-LAX",
      "connection": "keep-alive",
      "content-encoding": "gzip",
      "content-type": "application/json",
      "date": "Wed, 12 Mar 2025 00:03:15 GMT",
      "request-id": "req_01V3qNHXXiBb5QUQbEPbWLQp",
      "server": "cloudflare",
      "transfer-encoding": "chunked",
      "via": "1.1 google",
      "x-robots-tag": "none"
    },
    "body": {
      "id": "msg_01J9WPaahax6ei8cJ6N1wBrg",
      "type": "message",
      "role": "assistant",
      "model": "claude-3-5-sonnet-20241022",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01Gug5JfNNvx4P5S5ob2ejKU",
          "name": "json",
          "input": {
            "code": "/**\n * Creates a memoized version of a function that caches its results\n * @param {Function} fn - The function to memoize\n * @return {Function} - The memoized function\n */\nfunction memoize(fn) {\n  const cache = new Map();\n  \n  return function(...args) {\n    // Create a cache key by stringifying the arguments\n    const key = JSON.stringify(args);\n    \n    // Check if result exists in cache\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    \n    // Calculate result and store in cache\n    const result = fn.apply(this, args);\n    cache.set(key, result);\n    return result;\n  };\n}\n\n// Example usage:\nfunction expensiveCalculation(n) {\n  // Simulate expensive computation\n  Utilities.sleep(1000);\n  return n * n;\n}\n\n// Create memoized version\nconst memoizedCalc = memoize(expensiveCalculation);\n\nfunction testMemoization() {\n  console.time('First call');\n  console.log(memoizedCalc(5)); // Takes ~1 second\n  console.timeEnd('First call');\n  \n  console.time('Second call');\n  console.log(memoizedCalc(5)); // Instant (cached)\n  console.timeEnd('Second call');\n  \n  console.time('New input');\n  console.log(memoizedCalc(10)); // Takes ~1 second (new calculation)\n  console.timeEnd('New input');\n}"
          }
        }
      ],
      "stop_reason": "tool_use",
      "stop_sequence": null,
      "usage": {
        "input_tokens": 472,
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 0,
        "output_tokens": 414
      }
    }
  },
  "request": {
    "body": "{\"model\":\"claude-3-5-sonnet-20241022\",\"max_tokens\":5000,\"temperature\":0,\"system\":[{\"type\":\"text\",\"text\":\"You are an expert in Google Apps Script writing code. Your output should only be valid code that can be run in Google Apps Script. DO NOT WRITE MARKOWN. RETURN VALID APPS SCRIPT CODE ONLY.\"}],\"messages\":[{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":\"Write Apps Script code that memoizes an expensive function call\"}]}],\"tools\":[{\"name\":\"json\",\"description\":\"Respond with a JSON object.\",\"input_schema\":{\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"string\",\"description\":\"Valid Apps Script code\"}},\"required\":[\"code\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}}],\"tool_choice\":{\"type\":\"tool\",\"name\":\"json\"}}"
  },
  "duration": 70543
}