{
  "object": {
    "code": "function addThousandRows() {\n  // Get the active spreadsheet and sheet\n  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = spreadsheet.getActiveSheet();\n  \n  // Create an array to hold 1000 rows of data\n  var data = [];\n  for (var i = 0; i < 1000; i++) {\n    // Each row will be an array with a single value showing the row number\n    data.push([`Row ${i + 1}`]);\n  }\n  \n  // Get the last row of the sheet\n  var lastRow = sheet.getLastRow();\n  \n  // Get the range for the new rows\n  var range = sheet.getRange(lastRow + 1, 1, 1000, 1);\n  \n  // Set the values all at once (more efficient than row by row)\n  range.setValues(data);\n  \n  // Optional: Flush to ensure all changes are written\n  SpreadsheetApp.flush();\n}"
  },
  "finishReason": "tool-calls",
  "usage": {
    "promptTokens": 479,
    "completionTokens": 276,
    "totalTokens": 755
  },
  "warnings": [],
  "providerMetadata": {
    "anthropic": {
      "cacheCreationInputTokens": 0,
      "cacheReadInputTokens": 0
    }
  },
  "experimental_providerMetadata": {
    "anthropic": {
      "cacheCreationInputTokens": 0,
      "cacheReadInputTokens": 0
    }
  },
  "response": {
    "id": "msg_01S7wjS27kc3CuvvBTsFhyPo",
    "timestamp": "2025-03-12T00:05:33.954Z",
    "modelId": "claude-3-5-sonnet-20241022",
    "headers": {
      "anthropic-organization-id": "215d381a-c388-42c7-8115-840170a6d5c4",
      "anthropic-ratelimit-input-tokens-limit": "40000",
      "anthropic-ratelimit-input-tokens-remaining": "40000",
      "anthropic-ratelimit-input-tokens-reset": "2025-03-12T00:04:20Z",
      "anthropic-ratelimit-output-tokens-limit": "8000",
      "anthropic-ratelimit-output-tokens-remaining": "8000",
      "anthropic-ratelimit-output-tokens-reset": "2025-03-12T00:04:24Z",
      "anthropic-ratelimit-requests-limit": "50",
      "anthropic-ratelimit-requests-remaining": "49",
      "anthropic-ratelimit-requests-reset": "2025-03-12T00:04:20Z",
      "anthropic-ratelimit-tokens-limit": "48000",
      "anthropic-ratelimit-tokens-remaining": "48000",
      "anthropic-ratelimit-tokens-reset": "2025-03-12T00:04:20Z",
      "cf-cache-status": "DYNAMIC",
      "cf-ray": "91ef08925f2d2f75-LAX",
      "connection": "keep-alive",
      "content-encoding": "gzip",
      "content-type": "application/json",
      "date": "Wed, 12 Mar 2025 00:04:24 GMT",
      "request-id": "req_01Qj8XCWXZ6KgLwvsqeChkk3",
      "server": "cloudflare",
      "transfer-encoding": "chunked",
      "via": "1.1 google",
      "x-robots-tag": "none"
    },
    "body": {
      "id": "msg_01S7wjS27kc3CuvvBTsFhyPo",
      "type": "message",
      "role": "assistant",
      "model": "claude-3-5-sonnet-20241022",
      "content": [
        {
          "type": "tool_use",
          "id": "toolu_01KDMaYSpQYYuJZNNFDKKrto",
          "name": "json",
          "input": {
            "code": "function addThousandRows() {\n  // Get the active spreadsheet and sheet\n  var spreadsheet = SpreadsheetApp.getActiveSpreadsheet();\n  var sheet = spreadsheet.getActiveSheet();\n  \n  // Create an array to hold 1000 rows of data\n  var data = [];\n  for (var i = 0; i < 1000; i++) {\n    // Each row will be an array with a single value showing the row number\n    data.push([`Row ${i + 1}`]);\n  }\n  \n  // Get the last row of the sheet\n  var lastRow = sheet.getLastRow();\n  \n  // Get the range for the new rows\n  var range = sheet.getRange(lastRow + 1, 1, 1000, 1);\n  \n  // Set the values all at once (more efficient than row by row)\n  range.setValues(data);\n  \n  // Optional: Flush to ensure all changes are written\n  SpreadsheetApp.flush();\n}"
          }
        }
      ],
      "stop_reason": "tool_use",
      "stop_sequence": null,
      "usage": {
        "input_tokens": 479,
        "cache_creation_input_tokens": 0,
        "cache_read_input_tokens": 0,
        "output_tokens": 276
      }
    }
  },
  "request": {
    "body": "{\"model\":\"claude-3-5-sonnet-20241022\",\"max_tokens\":5000,\"temperature\":0,\"system\":[{\"type\":\"text\",\"text\":\"You are an expert in Google Apps Script writing code. Your output should only be valid code that can be run in Google Apps Script. DO NOT WRITE MARKOWN. RETURN VALID APPS SCRIPT CODE ONLY.\"}],\"messages\":[{\"role\":\"user\",\"content\":[{\"type\":\"text\",\"text\":\"Write Apps Script code to create a function that adds 1000 rows to a Google Sheet\"}]}],\"tools\":[{\"name\":\"json\",\"description\":\"Respond with a JSON object.\",\"input_schema\":{\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"string\",\"description\":\"Valid Apps Script code\"}},\"required\":[\"code\"],\"additionalProperties\":false,\"$schema\":\"http://json-schema.org/draft-07/schema#\"}}],\"tool_choice\":{\"type\":\"tool\",\"name\":\"json\"}}"
  },
  "duration": 75156
}