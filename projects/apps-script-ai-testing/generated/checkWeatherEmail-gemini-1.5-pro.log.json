{
  "object": {
    "code": "function checkWeatherAndSendEmail() {\n  // Get the location for weather information (replace with your location)\n  var location = \"New York, NY\";\n\n  // Get the weather data using the Weather API\n  var weatherData = getWeatherData(location);\n\n  // Check if it's going to rain\n  if (isRaining(weatherData)) {\n    // Send an email notification\n    sendEmailNotification(weatherData);\n  }\n}\n\nfunction getWeatherData(location) {\n  // Replace with your preferred weather API and API key\n  var apiKey = \"YOUR_API_KEY\";\n  var apiUrl = \"https://api.weatherapi.com/v1/current.json?key=\" + apiKey + \"&q=\" + location;\n\n  var response = UrlFetchApp.fetch(apiUrl);\n  var data = JSON.parse(response.getContentText());\n\n  return data;\n}\n\nfunction isRaining(weatherData) {\n  // Check for rain conditions in the weather data\n  // Adapt this logic based on the structure of your weather API's response\n  return weatherData.current.condition.text.toLowerCase().includes(\"rain\");\n}\n\nfunction sendEmailNotification(weatherData) {\n  // Set up email parameters\n  var recipient = \"your_email@example.com\"; // Replace with your email address\n  var subject = \"Rain Alert!\";\n  var body = \"It's going to rain in \" + weatherData.location.name + \".\\n\" +\n             \"Current condition: \" + weatherData.current.condition.text + \".\";\n\n  // Send the email\n  MailApp.sendEmail(recipient, subject, body);\n}\n"
  },
  "finishReason": "stop",
  "usage": {
    "promptTokens": 65,
    "completionTokens": 418,
    "totalTokens": 483
  },
  "warnings": [],
  "providerMetadata": {
    "google": {
      "groundingMetadata": null,
      "safetyRatings": null
    }
  },
  "experimental_providerMetadata": {
    "google": {
      "groundingMetadata": null,
      "safetyRatings": null
    }
  },
  "response": {
    "id": "aiobj-I6QhN3qh20rLg79FNMu2zhaG",
    "timestamp": "2025-03-11T22:13:57.880Z",
    "modelId": "gemini-1.5-pro",
    "headers": {
      "alt-svc": "h3=\":443\"; ma=2592000,h3-29=\":443\"; ma=2592000",
      "content-encoding": "gzip",
      "content-type": "application/json; charset=UTF-8",
      "date": "Tue, 11 Mar 2025 22:12:57 GMT",
      "server": "scaffolding on HTTPServer2",
      "server-timing": "gfet4t7; dur=6044",
      "transfer-encoding": "chunked",
      "vary": "Origin, X-Origin, Referer",
      "x-content-type-options": "nosniff",
      "x-frame-options": "SAMEORIGIN",
      "x-xss-protection": "0"
    },
    "body": {
      "candidates": [
        {
          "content": {
            "parts": [
              {
                "text": "{\"code\": \"function checkWeatherAndSendEmail() {\\n  // Get the location for weather information (replace with your location)\\n  var location = \\\"New York, NY\\\";\\n\\n  // Get the weather data using the Weather API\\n  var weatherData = getWeatherData(location);\\n\\n  // Check if it's going to rain\\n  if (isRaining(weatherData)) {\\n    // Send an email notification\\n    sendEmailNotification(weatherData);\\n  }\\n}\\n\\nfunction getWeatherData(location) {\\n  // Replace with your preferred weather API and API key\\n  var apiKey = \\\"YOUR_API_KEY\\\";\\n  var apiUrl = \\\"https://api.weatherapi.com/v1/current.json?key=\\\" + apiKey + \\\"&q=\\\" + location;\\n\\n  var response = UrlFetchApp.fetch(apiUrl);\\n  var data = JSON.parse(response.getContentText());\\n\\n  return data;\\n}\\n\\nfunction isRaining(weatherData) {\\n  // Check for rain conditions in the weather data\\n  // Adapt this logic based on the structure of your weather API's response\\n  return weatherData.current.condition.text.toLowerCase().includes(\\\"rain\\\");\\n}\\n\\nfunction sendEmailNotification(weatherData) {\\n  // Set up email parameters\\n  var recipient = \\\"your_email@example.com\\\"; // Replace with your email address\\n  var subject = \\\"Rain Alert!\\\";\\n  var body = \\\"It's going to rain in \\\" + weatherData.location.name + \\\".\\\\n\\\" +\\n             \\\"Current condition: \\\" + weatherData.current.condition.text + \\\".\\\";\\n\\n  // Send the email\\n  MailApp.sendEmail(recipient, subject, body);\\n}\\n\"}"
              }
            ],
            "role": "model"
          },
          "finishReason": "STOP",
          "avgLogprobs": -0.03119126233187589
        }
      ],
      "usageMetadata": {
        "promptTokenCount": 65,
        "candidatesTokenCount": 418,
        "totalTokenCount": 483,
        "promptTokensDetails": [
          {
            "modality": "TEXT",
            "tokenCount": 65
          }
        ],
        "candidatesTokensDetails": [
          {
            "modality": "TEXT",
            "tokenCount": 418
          }
        ]
      },
      "modelVersion": "gemini-1.5-pro-002"
    }
  },
  "request": {
    "body": "{\"generationConfig\":{\"maxOutputTokens\":5000,\"temperature\":0,\"responseMimeType\":\"application/json\",\"responseSchema\":{\"required\":[\"code\"],\"type\":\"object\",\"properties\":{\"code\":{\"description\":\"Valid Apps Script code\",\"type\":\"string\"}}}},\"contents\":[{\"role\":\"user\",\"parts\":[{\"text\":\"Write Apps Script code to check the weather and send an email if it is going to rain\"}]}],\"systemInstruction\":{\"parts\":[{\"text\":\"You are an expert in Google Apps Script writing code. Your output should only be valid code that can be run in Google Apps Script. DO NOT WRITE MARKOWN. RETURN VALID APPS SCRIPT CODE ONLY.\"}]}}"
  },
  "duration": 66865
}